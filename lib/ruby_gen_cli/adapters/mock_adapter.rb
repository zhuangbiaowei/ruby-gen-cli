# frozen_string_literal: true

module RubyGenCli
  module Adapters
    # Mock adapter for testing purposes
    class MockAdapter
      def initialize(config = {})
        @config = config
        @mock_responses = []
        setup_default_responses
      end
      
      def chat_completions(messages, model: nil, temperature: 0.7, max_tokens: 1000, stream: false)
        # Simulate API delay
        sleep 0.1
        
        user_message = messages.find { |msg| msg[:role] == 'user' }&.dig(:content) || ''
        
        response = generate_mock_response(user_message)
        
        if stream
          # For streaming, yield chunks
          response.split(' ').each do |word|
            yield({
              'choices' => [{
                'delta' => { 'content' => word + ' ' },
                'finish_reason' => nil
              }]
            })
            sleep 0.05
          end
          
          yield({
            'choices' => [{
              'delta' => {},
              'finish_reason' => 'stop'  
            }]
          })
        else
          # Return complete response
          {
            'choices' => [{
              'message' => {
                'role' => 'assistant',
                'content' => response
              },
              'finish_reason' => 'stop'
            }],
            'usage' => {
              'prompt_tokens' => messages.map { |m| m[:content].split.size }.sum,
              'completion_tokens' => response.split.size,
              'total_tokens' => messages.map { |m| m[:content].split.size }.sum + response.split.size
            }
          }
        end
      end
      
      private
      
      def setup_default_responses
        @mock_responses = [
          {
            pattern: /what.*ruby/i,
            response: "Ruby is a dynamic, object-oriented programming language known for its simplicity and productivity."
          },
          {
            pattern: /analyze.*code/i,
            response: "Based on the code analysis, I can see several patterns and potential improvements. The code structure looks well-organized."
          },
          {
            pattern: /generate.*function/i,
            response: "Here's a generated function that meets your requirements:\n\n```ruby\ndef example_function\n  puts 'Generated by Ruby Gen CLI'\nend\n```"
          },
          {
            pattern: /help|assist/i,
            response: "I'm Ruby Gen CLI, your AI-powered development assistant. I can help with code analysis, generation, debugging, and more!"
          }
        ]
      end
      
      def generate_mock_response(input)
        matching_response = @mock_responses.find { |resp| input.match?(resp[:pattern]) }
        
        if matching_response
          matching_response[:response]
        else
          "I understand you're asking about: '#{input}'. This is a mock response from Ruby Gen CLI. In a real implementation, this would be processed by an actual LLM."
        end
      end
    end
  end
end